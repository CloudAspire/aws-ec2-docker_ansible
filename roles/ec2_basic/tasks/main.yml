- name: Check whether the private_key_backup exists
  stat:
    path: "{{ ec2_basic.keys_dir }}/{{ key_name }}.pub"
  register: ec2_key
  when: ec2_basic.state == "present"

- name: generate public key
  shell: "ssh-keygen -N '' -C 'ansible@localhost' -f {{ ec2_basic.keys_dir }}/{{ key_name }} -q"
  when: ec2_basic.state == "present" and ec2_key.stat.exists == false

- name: Manager SSH Key pair
  ec2_key:
    aws_access_key: "{{ec2_access_key}}"
    aws_secret_key: "{{ec2_secret_key}}"  
    name: "ansible-keypair-{{ key_name }}"
    state: "{{ec2_basic.state}}"
    key_material: "{{ item }}"
    region: "{{ region }}"    
  with_file: "{{ ec2_basic.keys_dir }}/{{ key_name }}.pub"

- name: Create a security group
  ec2_group:
    aws_access_key: "{{ec2_access_key}}"
    aws_secret_key: "{{ec2_secret_key}}"  
    name: "{{ security_group }}"
    description: Security Group for ansible ec2 instances
    # cannot delete here, since its dependetend from the instances below
    # state: "{{ec2_basic.state}}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0        
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: basic_firewall

- name: Manage EC2 Instance
  ec2: 
    aws_access_key: "{{ec2_access_key}}"
    aws_secret_key: "{{ec2_secret_key}}"  
    id: "ansible-keypair-{{ key_name }}"
    instance_ids: "{{ec2_basic.instance_ids.split(',')}}"
    group: "{{ security_group }}"
    instance_type: "{{ instance_type }}"
    instance_tags:
      Name: "{{ key_name }}"    
    image: "{{ ami_id }}"
    wait: true 
    region: "{{ region }}"
    keypair: "ansible-keypair-{{ key_name }}"
    count: "{{count}}"
    state: "{{ec2_basic.state}}"
  register: ec2

- name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
  lineinfile:
    dest: "./inventory" 
    regexp: "{{ item.public_ip }}"
    insertafter: "[playground]" 
    line: "{{ item.public_ip }}"
    state: "{{ec2_basic.state}}"
  delegate_to: localhost                
  with_items: "{{ec2.instances}}"
  when: ec2_basic.state == "present"

- name: Wait for SSH to come up
  local_action: wait_for 
                host={{ item.public_ip }} 
                port=22 
                state=started
  with_items: "{{ec2.instances}}"
  when: ec2_basic.state == "present"    

- name: Print pulic IP
  debug:
    msg: "Public IP: {{item.public_ip}}"
  with_items: "{{ec2.instances}}"    