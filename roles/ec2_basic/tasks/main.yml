- name: Check whether the private_key_backup exists
  stat:
    path: ./ec2.id_rsa
  register: ec2_key

- name: generate public key
  shell: "ssh-keygen -N '' -C 'ansible@localhost' -f ./ec2.id_rsa -q"
  when: ec2_key.stat.exists == false

- name: Manager SSH Key pair
  ec2_key:
    name: ansible-keypair
    key_material: "{{ item }}"
    region: "{{ region }}"    
  with_file: ./ec2.id_rsa.pub

- name: Create a security group
  ec2_group:
    name: "{{ security_group }}"
    description: Security Group for ansible ec2 instances
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: basic_firewall

- ec2_ami_find:
    name: "{{ image_name }}"
    region: "{{ region }}"
    sort: name
    sort_order: descending
    sort_end: 1
  register: ami_find

- name: Manage EC2 Instance
  ec2: 
    id: "{{ec2_idempotent_id}}"
    instance_ids: "{{ec2_basic.instance_ids}}"
    group: "{{ security_group }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami_find.results[0].ami_id }}"
    wait: true 
    region: "{{ region }}"
    keypair: ansible-keypair
    count: "{{count}}"
    state: "{{ec2_basic.state}}"
  register: ec2

- name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
  lineinfile:
    dest: "./hosts" 
    regexp: "{{ item.public_ip }}"
    insertafter: "[playground]" 
    line: "{{ item.public_ip }}"
    state: "{{ec2_basic.state}}"
  delegate_to: localhost                
  with_items: "{{ec2.instances}}"
  when: ec2_basic.state == "present"

- name: Wait for SSH to come up
  local_action: wait_for 
                host={{ item.public_ip }} 
                port=22 
                state=started
  with_items: "{{ec2.instances}}"
  when: ec2_basic.state == "present"

- name: Add tag to Instance(s)
  ec2_tag: 
    resource: "{{ item.id }}" 
    region: "{{ region }}" 
    state: present
  with_items: "{{ec2.instances}}"
  args:
    tags:
      Name: playground
  when: ec2_basic.state == "present"      